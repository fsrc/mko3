;Simple primitives
(byte hello-byte 4)               ; Define a variable of type byte
(int hello-int 3)                 ; Int
(float hello-float 4.4)           ; Float
(bool hello-bool true)            ; Boolean
;(char hello-char h)              ; Char
(string hello-str "Hello world")  ; String

; More complex primitives
(string mystr hello-str)          ; Reference to other variable
(regex hello-regex /myregex/i)    ; Regex




; Define tuple before usage
(tuple hello-tuple (quote int string))
(hello-tuple my-tuple (quote 9 "Hello world"))

; TODO: Named tuples

; Define array type before use
(array int-array int)
(int-array hello-ints (quote 3 54 6 4))

; TODO: Associative arrays
;

; Declare block
(block hello-block (int a 5))

; Define a function type that returns a byte based on two bytes input
(function tripple-byte-function (quote byte byte byte))

; Define a function of the previously defined type 'tripple-byte-function'
(tripple-byte-function my-add ((quote a b)
  (block entry
    (int a 2))))

; Define a function type that returns a byte with no input
;(function single-byte-function (quote byte))

; Define a function of the previously defined type 'single-byte-function'
;(single-byte-function main (()
  ;(block entry
    ;(my-add 3 4))))


